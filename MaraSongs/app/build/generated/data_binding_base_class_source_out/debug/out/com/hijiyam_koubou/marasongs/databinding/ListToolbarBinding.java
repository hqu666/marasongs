// Generated by view binder compiler. Do not edit!
package com.hijiyam_koubou.marasongs.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.hijiyam_koubou.marasongs.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListToolbarBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView artistHTF;

  @NonNull
  public final ImageView headImg;

  @NonNull
  public final LinearLayout headLayout;

  @NonNull
  public final Spinner listPlSp;

  @NonNull
  public final TextView mainHTF;

  @NonNull
  public final TextView subHTF;

  private ListToolbarBinding(@NonNull LinearLayout rootView, @NonNull TextView artistHTF,
      @NonNull ImageView headImg, @NonNull LinearLayout headLayout, @NonNull Spinner listPlSp,
      @NonNull TextView mainHTF, @NonNull TextView subHTF) {
    this.rootView = rootView;
    this.artistHTF = artistHTF;
    this.headImg = headImg;
    this.headLayout = headLayout;
    this.listPlSp = listPlSp;
    this.mainHTF = mainHTF;
    this.subHTF = subHTF;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListToolbarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListToolbarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_toolbar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListToolbarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.artistHTF;
      TextView artistHTF = ViewBindings.findChildViewById(rootView, id);
      if (artistHTF == null) {
        break missingId;
      }

      id = R.id.headImg;
      ImageView headImg = ViewBindings.findChildViewById(rootView, id);
      if (headImg == null) {
        break missingId;
      }

      id = R.id.headLayout;
      LinearLayout headLayout = ViewBindings.findChildViewById(rootView, id);
      if (headLayout == null) {
        break missingId;
      }

      id = R.id.list_pl_sp;
      Spinner listPlSp = ViewBindings.findChildViewById(rootView, id);
      if (listPlSp == null) {
        break missingId;
      }

      id = R.id.mainHTF;
      TextView mainHTF = ViewBindings.findChildViewById(rootView, id);
      if (mainHTF == null) {
        break missingId;
      }

      id = R.id.subHTF;
      TextView subHTF = ViewBindings.findChildViewById(rootView, id);
      if (subHTF == null) {
        break missingId;
      }

      return new ListToolbarBinding((LinearLayout) rootView, artistHTF, headImg, headLayout,
          listPlSp, mainHTF, subHTF);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
